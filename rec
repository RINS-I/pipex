  Inter Process Communication:

	pipe is a Communication medium btw two or more related
or interrelated processes.

	This system call would --create-- a pipe for one-way communication i.e.,
it creates two descriptors, first one is connected to read from the pipe
and other one is connected to write into the pipe.

	fd[0] - for reading
	fd[1] - for writing

	This call would return zero on success and -1 in case of failure. To
know the cause of failure, check with errno variable or perror() function.

	PID:
	Sous Linux, un exécutable stocké sur disque est appelé un programme,
et un programme chargé en mémoire et en cours d'exécution est appelé un processus.
Lorsqu'un processus est démarré, il reçoit un numéro unique appelé ID de processus (PID)
qui identifie ce processus dans le système.
Si vous avez besoin de tuer un processus, par exemple, vous pouvez vous y référer par son PID.

	WAIT(NULL):
wait(NULL) or more accurately wait(0) maens wait until a state change in the child process.

	EXECVE:
--int	execve(const char * path, char * const argv[], char * const envp[]);
--execve() exécute le programme pointé par filename .

	WAITPID():
--pid_t	waitpid(pid_t pid, int *status_ptr, int options);
Specifies the child processes the caller wants to wait for:
+If pid > 0, waitpid() waits for termination of the specific child whose process ID is equal to pid.
+If pid == 0, waitpid() waits for termination of any child whose process group ID is equal to that of
the caller.
+If pid == -1, waitpid() waits for any child process to end.
+If pid < -1, waitpid() waits for the termination of any child whose process group ID is equal to
the absolute value of pid.


	DUP2():
--int dup2(int oldfd, int newfd);

	ACCESS():
--int access(const char *pathname, int mode);
access - check real user''s permissions for a file
F_OK flag : Used to check for existence of file.


	O_TRUNC:
	If the file already exists and is a regular file and the
access mode allows writing (i.e., is O_RDWR or O_WRONLY)
it will be truncated to length 0.  If the file is a FIFO
or terminal device file, the O_TRUNC flag is ignored.
Otherwise, the effect of O_TRUNC is unspecified.